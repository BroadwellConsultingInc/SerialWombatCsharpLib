/*
Copyright 2021 Broadwell Consulting Inc.

Serial Wombat is a registered trademark of Broadwell Consulting Inc. in the United States.

Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace SerialWombat
{
	public class SerialWombatTM1637
	{
public enum SWTM1637Mode {
	tm1637Decimal16 = 0,  ///< Get the number to display from a pin or data source and display in decimal
	tm1637Hex16 = 1,	///< Get the number to display from a pin or data source and display in hex
	tm1637CharArray = 2, ///< Display a string sent by the host
	tm1637RawArray = 3, ///<Display raw LED segments sent by the host
	tm1637Animation = 4, /// < Display an animation loaded by the host and clocked out by the Serial Wombat chip
};

	}
Int16 SerialWombatTM1637::begin(byte clkPin, byte dioPin, byte digits, SWTM1637Mode mode, byte dataSourcePin,   byte brightness0to7)
{
	_pin = clkPin;
	byte tx_200[8] = {
		200, // Pin Set command
		clkPin,
		11, // TM1637
		dioPin,
		digits,
		(byte)mode,
		dataSourcePin,
		brightness0to7,
	};
	Int16 retval = _sw.sendPacket(tx_200);
    return retval;
}

Int16 SerialWombatTM1637::writeDigitOrder(byte first, byte second, byte third, byte fourth, byte fifth, byte sixth)
{
	byte[] tx_201 = {
		201, // Pin Set command
		_pin,
		11, // TM1637
		first,
		second,
		third,
		fourth,
		fifth,
	};
	int retval = _sw.sendPacket(tx_201);
	if (retval < 0)
	{
		return retval;
	}
	byte tx_202[8] = {
		202, // Pin Set command
		_pin,
		11, // TM1637
		sixth,
		0x55,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_202);
}

Int16 SerialWombatTM1637::writeArray(byte data[6])
{
	byte[] tx_204 = {
		204, // Pin Set command
		_pin,
		11, // TM1637
		data[0],
		data[1],
		data[2],
		data[3],
		data[4],
	};
	int retval = _sw.sendPacket(tx_204);
	if (retval < 0)
	{
		return retval;
	}
	byte tx_205[8] = {
		205, // Pin Set command
		_pin,
		11, // TM1637
		data[5],
		0x55,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_205);
}

Int16 SerialWombatTM1637::writeDecimalBitmap(byte decimalBitmapLSBleftDigit)
{
	byte[] tx_206 = {
		206, // Pin Set command
		_pin,
		11, // TM1637
		decimalBitmapLSBleftDigit,
		0x55,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_206);
}

Int16 SerialWombatTM1637::writeBrightness(byte brightness0to7)
{
	byte[] tx_203 = {
		203, // Pin Set command
		_pin,
		11, // TM1637
		brightness0to7,
		0x55,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_203);
}

Int16 SerialWombatTM1637::writeAnimation(uint16_t bufferIndex, uint16_t delay, byte numberOfFrames, byte data[][6])
{
	int result = _sw.writeUserBuffer(bufferIndex, (byte*)data, numberOfFrames * 6);

	if (result < 0)
	{
		return result;
	}
	byte[] settings = { SW_LE16(bufferIndex), SW_LE16(delay), numberOfFrames, 0 };
	return writeArray(settings);

}

Int16 SerialWombatTM1637::suppressLeadingZeros(bool suppress)
{
	byte[] tx_203 = {
		203, // Pin Set command
		_pin,
		11, // TM1637
		0x55, // Don't change brightness
		suppress?(byte)1:(byte)0,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_203);
}

Int16 SerialWombatTM1637::writeBlinkBitmap(byte decimalBitmapLSBleftDigit)
{
	byte[] tx_206 = {
		207, // Pin Set command
		_pin,
		11, // TM1637
		decimalBitmapLSBleftDigit,
		0x55,
		0x55,
		0x55,
		0x55,
	};
	return _sw.sendPacket(tx_206);
}

size_t SerialWombatTM1637::write(byte data)
{
	byte[] tx = {
		(byte)SerialWombatCommands::CONFIGURE_PIN_MODE8, // Pin Set command
		_pin,
		PIN_MODE_TM1637, // TM1637
		1,
		data,
		0x55,
		0x55,
		0x55,
	};
	if (_sw.sendPacket(tx) < 0)
	{
		return 0;
	}
	else
	{
		return 1;
	}
}

size_t SerialWombatTM1637::write(byte[] buffer, size_t size)
{
	size_t initialSize = size;
	if (size > 6)
	{
		buffer += size - 6;
		size = 6;
	}
	if (size > 4)
	{
		byte[] tx = {
		(byte)SerialWombatCommands::CONFIGURE_PIN_MODE8, // Pin Set command
		_pin,
		PIN_MODE_TM1637, // TM1637
		4,
		buffer[0],
		buffer[1],
		buffer[2],
		buffer[3],
		};
		_sw.sendPacket(tx);
		size -= 4;
		buffer += 4;
	}

	{
		byte tx[8] = {
		(byte)SerialWombatCommands::CONFIGURE_PIN_MODE8, // Pin Set command
		_pin,
		PIN_MODE_TM1637, // TM1637
		(byte)size,
		buffer[0],
		size > 1 ? buffer[1] : (byte)0x55,
		size > 2 ? buffer[2] : (byte)0x55,
	    size > 3 ? buffer[3] : (byte)0x55,
		};
		_sw.sendPacket(tx);
	}
	return size_t(initialSize);
}


}
