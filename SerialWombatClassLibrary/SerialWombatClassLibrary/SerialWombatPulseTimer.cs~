using System;
using System.Collections.Generic;
using System.Text;

namespace SerialWombat
{
    public class SerialWombatPulseTimer
    {
SerialWombatChip _sw;
	byte _pin = 255;

public 		 SerialWombatPulseTimer(SerialWombatChip serialWombatChip)
		{
			_sw = serialWombatChip;

		}

public 		void  begin(byte pin)
		{
			begin(pin, SW_PULSETIMER_uS, false);
		}

public 		void  begin(byte pin, SerialWombatPulseTimerUnits units, bool pullUpsEnabled)
		{
			_pin = pin;
			byte[] tx = { 200, _pin, (byte)SerialWombatPinModes.PIN_MODE_PULSETIMER, pullUpsEnabled, (byte)units, 0x55, 0x55, 0x55 };
			_sw.sendPacket(tx);
		}

public 		void  refresh()
		{
			refreshHighCountsLowCounts();
			{
				byte[] tx = { 202, _pin, (byte)SerialWombatPinModes.PIN_MODE_PULSETIMER, 0x55, 0x55, 0x55, 0x55, 0x55 };
				byte[] rx;
				_sw.sendPacket(tx, out rx);
				Pulses = rx[5] + 256 * rx[6];
				MeasurementOverflowOccurred = rx[7];
			}
		}

public 		void  refreshHighCountsLowCounts()
		{
			byte[] tx = { 201, _pin, (byte)SerialWombatPinModes.PIN_MODE_PULSETIMER, 0x55, 0x55, 0x55, 0x55, 0x55 };
			byte[] rx;
			_sw.sendPacket(tx, out rx);
			HighCounts = rx[3] + 256 * rx[4];
			LowCounts = rx[5] + 256 * rx[6];
		}

public 		void  refreshHighCountsPulses()
		{
			byte[] tx = { 202, _pin, (byte)SerialWombatPinModes.PIN_MODE_PULSETIMER, 0x55, 0x55, 0x55, 0x55, 0x55 };
			byte[] rx;
			_sw.sendPacket(tx, out rx);
			HighCounts = rx[3] + 256 * rx[4];
			Pulses = rx[5] + 256 * rx[6];
			MeasurementOverflowOccurred = rx[7];
		}

public 		UInt16  readHighCounts()
		{
			refreshHighCountsLowCounts();
			return (HighCounts);
		}

public 		UInt16  readLowCounts()
		{
			refreshHighCountsLowCounts();
			return (LowCounts);
		}

public 		UInt16  readPulses()
		{
			refreshHighCountsPulses();
			return (Pulses);
		}

	}
}
