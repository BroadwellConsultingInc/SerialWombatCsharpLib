using System;
using System.Collections.Generic;
using System.Text;

namespace SerialWombat
{
    class SerialWombatDebouncedInput
    {
		SerialWombatChip _sw;
		byte _pin = 255;
		public 		 SerialWombatDebouncedInput(SerialWombatChip serialWombatChip)
		{
			_sw = serialWombatChip;
		}
public 		void  begin(byte pin)
		{
			begin(pin, 30, true, true);
		}

public 		void  begin(byte pin, UInt16 debounce_mS, bool invert, bool usePullUp)
		{
			_pin = pin;
			byte[] tx = { 200, _pin, 10, SW_LE16(debounce_mS), invert, 0, usePullUp };
			_sw.sendPacket(tx);
		}

public 		bool  digitalRead()
		{
			return (_sw.readPublicData(_pin) > 0);
		}


public 		UInt16  readDurationInTrueState_mS()
		{

			byte[] tx = { 201, _pin, 10, 1, 0x55, 0x55, 0x55, 0x55 };
			byte[] rx;
			_sw.sendPacket(tx, rx);

			transitions += (256 * rx[5] + rx[4]);
			if (rx[3] == 0)
			{
				return (0);
			}
			else
			{
				return (256 * rx[7] + rx[6]);
			}
		}

public 		UInt16  readDurationInFalseState_mS()
		{

			byte[] tx = { 201, _pin, 10, 1, 0x55, 0x55, 0x55, 0x55 };
			byte[] rx;
			_sw.sendPacket(tx, rx);

			transitions += (256 * rx[5] + rx[4]);

			if (rx[3] == 1)
			{
				return (0);
			}
			else
			{
				return (256 * rx[7] + rx[6]);
			}
		}

public 		bool  readTransitionsState()
		{
			byte[] tx = { 201, _pin, 10, 1, 0x55, 0x55, 0x55, 0x55 };
			byte[] rx;
			_sw.sendPacket(tx, rx);
			transitions = (256 * rx[5] + rx[4]);
			return (rx[3] > 0);
		}
	}
}
